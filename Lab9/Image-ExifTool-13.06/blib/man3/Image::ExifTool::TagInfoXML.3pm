.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Image::ExifTool::TagInfoXML 3pm"
.TH Image::ExifTool::TagInfoXML 3pm 2024-01-22 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Image::ExifTool::TagInfoXML \- Read/write tag information XML database
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is used to generate an XML database from all ExifTool tag
information.  The XML database may then be edited and used to re-generate
the language modules (Image::ExifTool::Lang::*).
.SH METHODS
.IX Header "METHODS"
.SS Write
.IX Subsection "Write"
Print complete tag information database in XML format.
.PP
.Vb 2
\&  # save list of all tags
\&  $success = Image::ExifTool::TagInfoXML::Write(\*(Aqdst.xml\*(Aq);
\&
\&  # list all IPTC tags to console, including Flags
\&  Image::ExifTool::TagInfoXML::Write(undef, \*(AqIPTC\*(Aq, Flags => 1);
\&
\&  # write all EXIF Camera tags to file
\&  Image::ExifTool::TagInfoXML::Write($outfile, \*(Aqexif:camera\*(Aq);
.Ve
.IP Inputs: 4
.IX Item "Inputs:"
0) [optional] Output file name, or undef for console output.  Output file
will be overwritten if it already exists.
.Sp
1) [optional] String of group names separated by colons to specify the group
to print.  A specific IFD may not be given as a group, since EXIF tags may
be written to any IFD.  Saves all groups if not specified.
.Sp
2) [optional] Hash of options values:
.Sp
.Vb 3
\&    Flags   \- Set to output \*(Aqflags\*(Aq attribute
\&    NoDesc  \- Set to suppress output of descriptions
\&    Lang    \- Select a single language for output
.Ve
.IP "Return Value:" 4
.IX Item "Return Value:"
True on success.
.IP "Sample XML Output:" 4
.IX Item "Sample XML Output:"
.PP
.Vb 2
\&  <?xml version=\*(Aq1.0\*(Aq encoding=\*(AqUTF\-8\*(Aq?>
\&  <taginfo>
\&
\&  <table name=\*(AqXMP::dc\*(Aq g0=\*(AqXMP\*(Aq g1=\*(AqXMP\-dc\*(Aq g2=\*(AqOther\*(Aq>
\&   <desc lang=\*(Aqen\*(Aq>XMP Dublin Core</desc>
\&   <tag id=\*(Aqtitle\*(Aq name=\*(AqTitle\*(Aq type=\*(Aqlang\-alt\*(Aq writable=\*(Aqtrue\*(Aq g2=\*(AqImage\*(Aq>
\&    <desc lang=\*(Aqen\*(Aq>Title</desc>
\&    <desc lang=\*(Aqde\*(Aq>Titel</desc>
\&    <desc lang=\*(Aqfr\*(Aq>Titre</desc>
\&   </tag>
\&   ...
\&  </table>
\&
\&  </taginfo>
.Ve
.PP
Flags (if selected and available) are formatted as a comma-separated list of
the following possible values:  Avoid, Binary, List, Mandatory, Permanent,
Protected, Unknown and Unsafe.  See the
tag name documentation and
lib/Image/ExifTool/README for a description of these flags.  For XMP List
tags, the list type (Alt, Bag or Seq) is also output as a flag if
applicable.
.SS BuildLangModules
.IX Subsection "BuildLangModules"
Build all Image::ExifTool::Lang modules from an XML database file.
.PP
.Vb 1
\&    Image::ExifTool::TagInfoXML::BuildLangModules(\*(Aqsrc.xml\*(Aq);
.Ve
.IP Inputs: 4
.IX Item "Inputs:"
0) XML file name
.Sp
1) Update flags:
.Sp
.Vb 4
\&    0x01 = preserve version numbers
\&    0x02 = update all modules, even if they didn\*(Aqt change
\&    0x04 = update from scratch, ignoring existing definitions
\&    0x08 = override existing different descriptions and values
.Ve
.IP "Return Value:" 4
.IX Item "Return Value:"
Number of modules updated, or negative on error.
.SH AUTHOR
.IX Header "AUTHOR"
Copyright 2003\-2024, Phil Harvey (philharvey66 at gmail.com)
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBImage::ExifTool\fR\|(3pm),
\&\fBImage::ExifTool::TagNames\fR\|(3pm)
